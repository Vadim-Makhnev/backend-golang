basePath: /
definitions:
  dto.UserLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 7
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegister:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 7
        type: string
      username:
        maxLength: 20
        minLength: 5
        type: string
    required:
    - email
    - password
    - username
    type: object
host: localhost:8080
info:
  contact:
    email: support@project.com
    name: API Support
  description: This is a sample server for a project.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Project API
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Logged in successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or validation failed
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or validation failed
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - auth
  /pages/main:
    get:
      description: Example of a protected route that requires JWT token
      produces:
      - text/plain
      responses:
        "200":
          description: Protected route
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Protected route
      tags:
      - protected
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
